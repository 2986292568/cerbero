From e60a73ce64c379fa84d935a1353489dc47ff84de Mon Sep 17 00:00:00 2001
From: Justin Kim <justin.kim@collabora.com>
Date: Mon, 9 Apr 2018 21:41:53 +0900
Subject: [PATCH] srt: build both shared and static libraries

To build SRT plugins for Android in cerbero, it should support
both static and shared libraries. In addition, the hard-coded
libraries such as pthread and rt should be removed.

Signed-off-by: Justin Kim <justin.kim@collabora.com>
---
 CMakeLists.txt | 105 +++++++++++++++++++++++++++++++------------------
 1 file changed, 66 insertions(+), 39 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 85eb9c5..37fb1f3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -45,9 +45,16 @@ option(ENABLE_CXX11 "Should the c++11 parts (stransmit) be enabled" ON)
 option(ENABLE_PROFILE "Should the build contain profile information. Ignored if compiler isn't GNU compatable." env{HAI_BUILD_PROFILE})
 option(ENABLE_LOGGING "Should logging be enabled" ${ENABLE_LOGGING_DEFAULT})
 option(ENABLE_SHARED "Should libsrt be built as a shared library" ON)
+option(ENABLE_STATIC "Should libsrt be built as a static library" OFF)
 option(ENABLE_SEPARATE_HAICRYPT "Should haicrypt be built as a separate library file" OFF)
 option(ENABLE_SUFLIP "Shuld suflip tool be built" OFF)
 option(USE_GNUTLS "Should use gnutls instead of openssl" OFF)
+option(ENABLE_BOTH "Should libsrt be built shared and static libraries" OFF)
+
+if (ENABLE_BOTH)
+	set(ENABLE_SHARED ON)
+	set(ENABLE_STATIC ON)
+endif()
 
 # Always turn logging on if the build type is debug
 if (ENABLE_DEBUG)
@@ -153,16 +160,7 @@ if (USE_STATIC_LIBSTDCXX)
 	endif()
 endif()
 
-
-if ( ENABLE_SHARED )
-    set (srt_libspec SHARED)
-else()
-    set (srt_libspec STATIC)
-endif()
-
-if (ENABLE_SEPARATE_HAICRYPT)
-	set (haicrypt_libspec ${srt_libspec})
-else()
+if (NOT ENABLE_SEPARATE_HAICRYPT)
 	set (haicrypt_libspec VIRTUAL)
 endif()
 
@@ -293,9 +291,12 @@ message(STATUS "SOURCES(haicrypt): ${SOURCES_haicrypt}")
 # library separation, however, there is no extra compat stuff on the
 # platform where it's being used.
 if (NOT haicrypt_libspec STREQUAL VIRTUAL)
-	message(STATUS "Making haicrypt as a ${haicrypt_libspec} library")
-	add_library(${TARGET_haicrypt} ${haicrypt_libspec} ${SOURCES_haicrypt})
-
+	if (ENABLE_SHARED)
+		add_library(${TARGET_haicrypt} SHARED ${SOURCES_haicrypt})
+	endif()
+	if (ENABLE_STATIC)
+		add_library(${TARGET_haicrypt}_static STATIC ${SOURCES_haicrypt})
+	endif()
 	# Note: POSIX specific; this is used in haisrt.pc.in
 	set (IFNEEDED_LINK_HAICRYPT -l${TARGET_haicrypt})
 
@@ -305,10 +306,17 @@ if (NOT haicrypt_libspec STREQUAL VIRTUAL)
 
 	if (ENABLE_SHARED)
 		target_compile_definitions(${TARGET_haicrypt} PUBLIC -DHAICRYPT_DYNAMIC)
+		target_compile_definitions(${TARGET_haicrypt} PRIVATE -DHAICRYPT_EXPORTS)
+		list(APPEND TARGETS_haicrypt ${TARGET_haicrypt})
+	endif()
+	if (ENABLE_STATIC)
+		target_compile_definitions(${TARGET_haicrypt}_static PUBLIC -DHAICRYPT_DYNAMIC)
+		target_compile_definitions(${TARGET_haicrypt}_static PRIVATE -DHAICRYPT_EXPORTS)
+		list(APPEND TARGETS_haicrypt ${TARGET_haicrypt}_static)
 	endif()
 	target_compile_definitions(${TARGET_haicrypt} PRIVATE -DHAICRYPT_EXPORTS)
 
-	install(TARGETS ${TARGET_haicrypt}
+	install(TARGETS ${TARGETS_haicrypt}
 		RUNTIME DESTINATION bin
 		ARCHIVE DESTINATION lib
 		LIBRARY DESTINATION lib
@@ -346,7 +354,12 @@ else()
 	set (DEPENDS_srt ${TARGET_haicrypt})
 endif()
 
-add_library(${TARGET_srt} ${srt_libspec} ${SOURCES_srt} ${SOURCES_srt_extra})
+if (ENABLE_SHARED)
+	add_library(${TARGET_srt} SHARED ${SOURCES_srt} ${SOURCES_srt_extra})
+endif()
+if (ENABLE_STATIC)
+	add_library(${TARGET_srt}_static STATIC ${SOURCES_srt} ${SOURCES_srt_extra})
+endif()
 
 # ---
 # And back to target: haicrypt. Both targets must be defined
@@ -357,46 +370,60 @@ add_library(${TARGET_srt} ${srt_libspec} ${SOURCES_srt} ${SOURCES_srt_extra})
 # Otherwise they apply to haicrypt.
 # ---
 
-
-target_include_directories(${TARGET_haicrypt}
-	PRIVATE  ${SSL_INCLUDE_DIRS}
-	PUBLIC ${SRT_SRC_HAICRYPT_DIR}
-)
-
-set_target_properties (${TARGET_haicrypt} PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR})
-target_link_libraries(${TARGET_haicrypt} PRIVATE ${SRT_LIBS_PRIVATE} ${SSL_LIBRARIES})
+if (ENABLE_SHARED)
+	set_target_properties (${TARGET_haicrypt} PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR})
+	target_include_directories(${TARGET_haicrypt}
+		PRIVATE  ${SSL_INCLUDE_DIRS}
+		PUBLIC ${SRT_SRC_HAICRYPT_DIR})
+	target_link_libraries(${TARGET_haicrypt} PRIVATE ${SRT_LIBS_PRIVATE} ${SSL_LIBRARIES})
+endif()
+if (ENABLE_STATIC)
+	target_include_directories(${TARGET_haicrypt}_static
+		PRIVATE  ${SSL_INCLUDE_DIRS}
+		PUBLIC ${SRT_SRC_HAICRYPT_DIR})
+	target_link_libraries(${TARGET_haicrypt}_static PRIVATE ${SRT_LIBS_PRIVATE} ${SSL_LIBRARIES})
+endif()
 
 if ( WIN32 AND NOT CYGWIN )
-	target_link_libraries(${TARGET_haicrypt} PRIVATE ws2_32)
+	if (ENABLE_SHARED)
+		target_link_libraries(${TARGET_haicrypt} PRIVATE ws2_32.lib)
+	endif()
+	if (ENABLE_STATIC)
+		target_link_libraries(${TARGET_haicrypt}_static PRIVATE ws2_32.lib)
+	endif()
+
 	set (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} "-lws2_32")
 endif()
 
 # ---
 # So, back to target: srt. Setting the rest of the settings for srt target.
 # ---
-
-set_target_properties (${TARGET_srt} PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR})
-target_link_libraries (${TARGET_srt} PUBLIC ${PTHREAD_LIBRARY} ${DEPENDS_srt})
-set (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ${PTHREAD_LIBRARY})
-target_include_directories(${TARGET_srt} PUBLIC ${PTHREAD_INCLUDE_DIR} ${SRT_SRC_SRTCORE_DIR})
-
-# Not sure why it's required, but somehow only on Linux
-if ( LINUX )
-	target_link_libraries(${TARGET_srt} PUBLIC rt)
-	set (IFNEEDED_SRT_LDFLAGS -pthread)
-endif()
-
-
-target_compile_definitions(${TARGET_srt} PRIVATE -DUDT_EXPORTS )
 if (ENABLE_SHARED)
+	set_target_properties (${TARGET_srt} PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR})
+	target_link_libraries (${TARGET_srt} PUBLIC ${DEPENDS_srt})
+	target_include_directories(${TARGET_srt} PUBLIC ${SRT_SRC_SRTCORE_DIR} ${SRT_SRC_HAICRYPT_DIR})
+        target_compile_definitions(${TARGET_srt} PRIVATE -DUDT_EXPORTS )
 	target_compile_definitions(${TARGET_srt} PUBLIC -DUDT_DYNAMIC) 
 endif()
+if (ENABLE_STATIC)
+	target_link_libraries (${TARGET_srt}_static PUBLIC ${DEPENDS_srt})
+	target_include_directories(${TARGET_srt}_static PUBLIC ${SRT_SRC_SRTCORE_DIR} ${SRT_SRC_HAICRYPT_DIR})
+        target_compile_definitions(${TARGET_srt}_static PRIVATE -DUDT_EXPORTS )
+endif()
+set (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE})
 
 if ( WIN32 AND NOT CYGWIN )
 	target_link_libraries(${TARGET_srt} PUBLIC ws2_32)
 endif()
 
-install(TARGETS ${TARGET_srt}
+if (ENABLE_SHARED)
+	list(APPEND TARGETS_srt ${TARGET_srt})
+endif()
+if (ENABLE_STATIC)
+	list(APPEND TARGETS_srt ${TARGET_srt}_static)
+endif()
+
+install(TARGETS ${TARGETS_srt}
 		RUNTIME DESTINATION bin
 		ARCHIVE DESTINATION lib
 		LIBRARY DESTINATION lib
-- 
2.17.0

