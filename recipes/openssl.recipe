# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from cerbero.build.build import modify_environment
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'openssl'
    version = '1.0.1h'
    licenses = [License.BSD_like]
    stype = SourceType.TARBALL
    url = 'http://www.openssl.org/source/{0}-{1}.tar.gz'.format(name, version)
    deps = ['gmp', 'zlib']
    # Parallel make fails randomly; probably races
    allow_parallel_build = False

    def prepare(self):
        # map platforms
        if self.config.target_platform == Platform.IOS:
            # Maybe BSD-generic32 is better?
            self.openssl_platform = 'iphoneos-cross'
        elif self.config.target_platform == Platform.ANDROID:
            self.openssl_platform = 'android-armv7'
            android_dev_path = os.path.join(self.config.toolchain_prefix,
                                            "platforms", "android-9",
                                            "arch-arm", "usr");
            # Set ANDROID_DEV so that the correct library search path is set
            self.make += ' ANDROID_DEV="{0}"'.format(android_dev_path)
        elif self.config.target_platform == Platform.DARWIN:
            self.openssl_platform = 'darwin64-x86_64-cc'
        elif self.config.target_platform == Platform.LINUX:
            self.openssl_platform = 'linux-x86_64'
        elif self.config.target_platform == Platform.WINDOWS:
            # Set CROSS_COMPILE so that the correct `windres` is invoked.
            # We don't do this in Configure because that messes with CC/LD/AR etc.
            if self.config.target_arch == Architecture.X86:
                self.openssl_platform = 'mingw'
                self.make += ' CROSS_COMPILE=i686-w64-mingw32-'
            elif self.config.target_arch == Architecture.X86_64:
                self.target_host_prefix = 'x86_64-w64-mingw32-'
                self.openssl_platform = 'mingw64'
                self.make += ' CROSS_COMPILE=x86_64-w64-mingw32-'

        self.append_env['CFLAGS'] = ' -DRAND_bytes=openssl_RAND_bytes'
        self.make_install = 'make install_sw'

    @modify_environment
    def configure(self):
        shell.call('sh ./Configure --prefix=%s shared %s' % (self.config.prefix, self.openssl_platform), self.build_dir)
