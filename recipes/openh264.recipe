# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'openh264'
    version = '1.1'
    url = 'https://github.com/cisco/%(name)s/archive/v%(version)s.tar.gz'
    stype = SourceType.TARBALL
    btype = BuildType.MAKEFILE
    licenses = [License.BSD]
    files_libs = ['libopenh264']
    files_devel = ['include/wels']

    def prepare(self):
        make = self.make
        if self.config.target_platform == Platform.IOS:
            make += ' OS=ios '
            if self.config.target_arch == Architecture.X86:
                make += ' ARCH=i386'
            elif self.config.target_arch == Architecture.X86_64:
                make += ' ARCH=x86_64'
            elif self.config.target_arch in [Architecture.ARM, Architecture.ARMv7]:
                make += ' ARCH=armv7'
            elif self.config.target_arch == Architecture.ARMv7S:
                make += ' ARCH=armv7s'
            elif self.config.target_arch == Architecture.ARM64:
                make += ' ARCH=arm64'
        elif self.config.target_platform == Platform.DARWIN:
            make += ' OS=darwin '
            if self.config.target_arch == Architecture.X86:
                make += ' ARCH=x86'
            elif self.config.target_arch == Architecture.X86_64:
                make += ' ARCH=x86_64'
        elif self.config.target_platform == Platform.ANDROID:
            make += ' OS=android TARGET=android-9'
            make += ' NDKROOT=' + self.config.toolchain_prefix
            if self.config.target_arch == Architecture.X86:
                make += ' ARCH=x86'
        elif self.config.target_platform == Platform.WINDOWS:
            make += ' OS=mingw_nt'
            if self.config.target_arch == Architecture.X86:
                make += ' ARCH=x86'
            elif self.config.target_arch == Architecture.X86_64:
                make += ' ARCH=x86_64'
        self.make = make + ' libraries'
        # `make install` also needs the exact same parameters as `make`
        self.make_install = make + ' install'

    def configure(self):
        shell.replace(os.path.join(self.build_dir, 'Makefile'),
                      # Fix hard-coded prefix
                      {'PREFIX=/usr/local': "PREFIX=" + self.config.prefix})
        shell.replace(os.path.join(self.build_dir, 'build',
                                   'platform-x86-common.mk'),
                      # Use yasm instead of nasm, since that's what Cerbero
                      # ships with
                      {'ASM = nasm': "ASM = yasm"})

        if self.config.target_platform == Platform.IOS and self.config.target_arch in [Architecture.X86, Architecture.X86_64]:
            shell.replace(os.path.join(self.build_dir, 'build',
                                       'platform-ios.mk'),
                          # Use correct compiler flag for iOS simulator
                          {'-miphoneos-version-min': '-mios-simulator-version-min'})

        # No configure script
